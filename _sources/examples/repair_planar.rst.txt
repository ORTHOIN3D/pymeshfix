.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_repair_planar.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_repair_planar.py:


Partial Fill Holes
------------------

This example fills all but the largest holes in a planar mesh.


.. code-block:: default


    # sphinx_gallery_thumbnail_number = 1
    import numpy as np
    import pyvista as pv
    from pymeshfix._meshfix import PyTMesh
    from pymeshfix.examples import planar_mesh
    from pymeshfix import MeshFix








plot the holes on the original mesh


.. code-block:: default

    orig_mesh = pv.read(planar_mesh)
    # orig_mesh.plot_boundaries()

    meshfix = MeshFix(orig_mesh)
    holes = meshfix.extract_holes()

    # Render the mesh and outline the holes
    plotter = pv.Plotter()
    plotter.add_mesh(orig_mesh, color=True)
    plotter.add_mesh(holes, color='r', line_width=5)
    plotter.enable_eye_dome_lighting() # helps depth perception
    _ = plotter.show()





.. image:: /examples/images/sphx_glr_repair_planar_001.png
    :class: sphx-glr-single-img





This example uses the lower level C interface to the TMesh object.


.. code-block:: default

    mfix = PyTMesh(False)  # False removes extra verbose output
    mfix.load_file(planar_mesh)

    # Fills all the holes having at at most 'nbe' boundary edges. If
    # 'refine' is true, adds inner vertices to reproduce the sampling
    # density of the surroundings. Returns number of holes patched.  If
    # 'nbe' is 0 (default), all the holes are patched.
    mfix.fill_small_boundaries(nbe=100, refine=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    16



Convert back to a pyvista mesh


.. code-block:: default

    vert, faces = mfix.return_arrays()
    triangles = np.empty((faces.shape[0], 4))
    triangles[:, -3:] = faces
    triangles[:, 0] = 3

    mesh = pv.PolyData(vert, triangles)








Plot the repaired mesh along with the original holes
Note: It seems there is a limit to the repair algorithm whereby some
of the holes that include only a single point are not filled. These
boundary holes are not detected by VTK's hole repair algorithm
either.


.. code-block:: default


    plotter = pv.Plotter()
    plotter.add_mesh(mesh, color=True)
    plotter.add_mesh(holes, color='r', line_width=5)
    plotter.enable_eye_dome_lighting() # helps depth perception
    _ = plotter.show()



.. image:: /examples/images/sphx_glr_repair_planar_002.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.447 seconds)


.. _sphx_glr_download_examples_repair_planar.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: repair_planar.py <repair_planar.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: repair_planar.ipynb <repair_planar.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
